{"status":"ok","feed":{"url":"https://medium.com/feed/@mr.khahani","title":"Stories by Mohammadreza Khahani on Medium","link":"https://medium.com/@mr.khahani?source=rss-affe3c708b5f------2","author":"","description":"Stories by Mohammadreza Khahani on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*TEVfOoq5waWD-SKg9yeNLw.png"},"items":[{"title":"Consider \u2018also\u2019 and \u2018apply\u2019 scope functions before they bite you!","pubDate":"2023-12-31 10:06:21","link":"https://medium.com/@mr.khahani/consider-also-and-apply-scope-functions-before-they-bite-you-2969d526093c?source=rss-affe3c708b5f------2","guid":"https://medium.com/p/2969d526093c","author":"Mohammadreza Khahani","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OxDupItXEmTchamhtBSVhA.png\"><figcaption><a href=\"https://kotlinlang.org/docs/scope-functions.html#function-selection\">Function selection table from kotlinlang.org</a></figcaption></figure><p>I was reviewing Kotlin's scope-function for interview preparation, no wonder I don\u2019t have a job as many other developers.</p>\n<p>After reviewing this familiar <a href=\"https://kotlinlang.org/docs/scope-functions.html#function-selection\">summary table</a> of scope functions and their distinctions, I came up with an idea regarding also and apply which the returns type is the context object. <br>No wonder, that on many posts you\u2019ve seen the common usage of apply is to configure the receiver object, and also uses to do more stuff on the receiver object. These common usages are true only if the type you\u2019re passing as the receiver object of also and apply is a <strong>mutable</strong>\u00a0type.</p>\n<p>Why is that? Let\u2019s consider the difference between the effect of apply and let scope functions on two famous immutable and mutable types, String and StringBuilder.</p>\n<p>StringBuilder is a mutable type so apply configured it perfectly. \ud83d\udc4d</p>\n<a href=\"https://medium.com/media/376847109d6e593d3ed22606247159c9/href\">https://medium.com/media/376847109d6e593d3ed22606247159c9/href</a><p>But, String is an immutable type so apply does not affect the original object.\u00a0\ud83d\udca5</p>\n<a href=\"https://medium.com/media/bfad79511880942a63c5768506639775/href\">https://medium.com/media/bfad79511880942a63c5768506639775/href</a><p>The last example doesn\u2019t work because s is type of String so it is immutable. The plus method concatinates two strings h and ello and returns a <strong>new</strong> String containing the result hello instead of <strong>modifying</strong> the original s.<br>As a result, s doesn\u2019t change and apply does nothing to the context\u00a0object.</p>\n<p>Since you are a brilliant developer, I\u2018ll keep my point simple and leave the consideration of such failure to your consideration. Happy coding\u00a0\ud83d\ude03</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2969d526093c\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OxDupItXEmTchamhtBSVhA.png\"><figcaption><a href=\"https://kotlinlang.org/docs/scope-functions.html#function-selection\">Function selection table from kotlinlang.org</a></figcaption></figure><p>I was reviewing Kotlin's scope-function for interview preparation, no wonder I don\u2019t have a job as many other developers.</p>\n<p>After reviewing this familiar <a href=\"https://kotlinlang.org/docs/scope-functions.html#function-selection\">summary table</a> of scope functions and their distinctions, I came up with an idea regarding also and apply which the returns type is the context object. <br>No wonder, that on many posts you\u2019ve seen the common usage of apply is to configure the receiver object, and also uses to do more stuff on the receiver object. These common usages are true only if the type you\u2019re passing as the receiver object of also and apply is a <strong>mutable</strong>\u00a0type.</p>\n<p>Why is that? Let\u2019s consider the difference between the effect of apply and let scope functions on two famous immutable and mutable types, String and StringBuilder.</p>\n<p>StringBuilder is a mutable type so apply configured it perfectly. \ud83d\udc4d</p>\n<a href=\"https://medium.com/media/376847109d6e593d3ed22606247159c9/href\">https://medium.com/media/376847109d6e593d3ed22606247159c9/href</a><p>But, String is an immutable type so apply does not affect the original object.\u00a0\ud83d\udca5</p>\n<a href=\"https://medium.com/media/bfad79511880942a63c5768506639775/href\">https://medium.com/media/bfad79511880942a63c5768506639775/href</a><p>The last example doesn\u2019t work because s is type of String so it is immutable. The plus method concatinates two strings h and ello and returns a <strong>new</strong> String containing the result hello instead of <strong>modifying</strong> the original s.<br>As a result, s doesn\u2019t change and apply does nothing to the context\u00a0object.</p>\n<p>Since you are a brilliant developer, I\u2018ll keep my point simple and leave the consideration of such failure to your consideration. Happy coding\u00a0\ud83d\ude03</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2969d526093c\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["programming","android","kotlin"]},{"title":"Now in Android\u00a0:core:common","pubDate":"2023-09-17 17:17:28","link":"https://medium.com/@mr.khahani/now-in-android-core-common-7ffd23e5d138?source=rss-affe3c708b5f------2","guid":"https://medium.com/p/7ffd23e5d138","author":"Mohammadreza Khahani","thumbnail":"","description":"\n<h3>Now in Android\u00a0:core:common</h3>\n<p>As part of implementing my project based on the <a href=\"https://github.com/android/nowinandroid/tree/main\"><strong>now in android</strong></a> sample, I followed their `<a href=\"https://github.com/android/nowinandroid/tree/main/core/common\">:core:common</a>` module to take care of the common things such as `CoroutineScope` and `Dispatchers` alongside `Result` which will be used as the wrapper of network responses or long-running tasks. So let\u2019s deep into their implementation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/902/1*6UexyvI7hlu9TALrdqVkVQ.png\"></figure><p>We\u2019re going to define a Dispatcher annotation to inject dispatchers to classes when it is needed. It\u2019s a best practice to inject them in order to give us the flexibility of switching them when testing those classes such as `ViewModels` or `Repositories`.</p>\n<a href=\"https://medium.com/media/bfbd2017431237a705282a8cb9acbb84/href\">https://medium.com/media/bfbd2017431237a705282a8cb9acbb84/href</a><p>I have no idea why they haven\u2019t defined one for the `Main` dispatcher, yet, but this is\u00a0it.</p>\n<p>Let\u2019s provide the corresponding Dispatchers for each of these by defining them in our dependency injection, Hilt, as\u00a0follows:</p>\n<a href=\"https://medium.com/media/8b4091d6dec5436fe2cba5d646fd23bd/href\">https://medium.com/media/8b4091d6dec5436fe2cba5d646fd23bd/href</a><p>With that, it\u2019s time to make a CoroutineScope for the ApplicationScope\u00a0. Since the application scope\u2019s context is <a href=\"https://medium.com/androiddevelopers/exceptions-in-coroutines-ce8da1ec060c\">SupervisorJob()</a> its children can fail independently because it\u2019s insane to cancel all the application coroutines if somewhere a failure\u00a0occurs!</p>\n<p>We can update the dispatcher when it is required so in order to have a clean code we use our Default dispatcher which is suitable for\u00a0testing.</p>\n<a href=\"https://medium.com/media/29eeb8cb7593f8fac6e4fa6804ee67bd/href\">https://medium.com/media/29eeb8cb7593f8fac6e4fa6804ee67bd/href</a><p>In order to clarify what I mean by updating the dispatcher you could check this code, which is somehow a simplified version of DataStoreModule.kt from the #nowinandroid app.</p>\n<a href=\"https://medium.com/media/d036b92247eed3e90c92346a503aac28/href\">https://medium.com/media/d036b92247eed3e90c92346a503aac28/href</a><p>We\u2019re done with coroutine stuff. Let\u2019s jump into the Result class to wrap network status into three stages: Loading, Success, and\u00a0Error.</p>\n<a href=\"https://medium.com/media/c5a7fb7888f80884765106b9752ca77e/href\">https://medium.com/media/c5a7fb7888f80884765106b9752ca77e/href</a><p>To use data object you need to update the project Kotlin version 1.9.0 as Android Studio will notify you about it. I did it by adding languageVersion to the build.gradle([your_project_name]) as\u00a0follows:</p>\n<a href=\"https://medium.com/media/caa49a854eecbb0230d637ca031de3fd/href\">https://medium.com/media/caa49a854eecbb0230d637ca031de3fd/href</a><p>Sorry, but I don\u2019t have any clue how to get rid of the warning that kotlinOptions is deprecated, yet. I\u2019ll be happy if <strong>let me know how to do it \ud83d\ude4f </strong>in the comments if I get any.\u00a0\ud83e\udd2a</p>\n<p>Commonly when we want to get a network response or any long process Result we expect the Loading state at first, and when it is ready to consume one of two Success or in case of any error, it becomes Error\u00a0.</p>\n<p>Let\u2019s define the asResult extension function to take care of such a scenario when providing Result from a\u00a0Flow.</p>\n<a href=\"https://medium.com/media/bd0cb01b6c3e9cde35a751c033c6be5d/href\">https://medium.com/media/bd0cb01b6c3e9cde35a751c033c6be5d/href</a><p>Now let\u2019s test our thoughts about asResult works as expected by writing a unit test. We need the <a href=\"https://github.com/cashapp/turbine\"><strong>Turbin</strong></a><strong> </strong>library to test\u00a0Flow.</p>\n<a href=\"https://medium.com/media/51439e51b25c2ededb0def438757b74b/href\">https://medium.com/media/51439e51b25c2ededb0def438757b74b/href</a><p>That\u2019s it. I tried to cover everything about the common `:core:module` included in the #nowinandroid project. I like to hear your feedback and Happy\u00a0coding.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7ffd23e5d138\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Now in Android\u00a0:core:common</h3>\n<p>As part of implementing my project based on the <a href=\"https://github.com/android/nowinandroid/tree/main\"><strong>now in android</strong></a> sample, I followed their `<a href=\"https://github.com/android/nowinandroid/tree/main/core/common\">:core:common</a>` module to take care of the common things such as `CoroutineScope` and `Dispatchers` alongside `Result` which will be used as the wrapper of network responses or long-running tasks. So let\u2019s deep into their implementation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/902/1*6UexyvI7hlu9TALrdqVkVQ.png\"></figure><p>We\u2019re going to define a Dispatcher annotation to inject dispatchers to classes when it is needed. It\u2019s a best practice to inject them in order to give us the flexibility of switching them when testing those classes such as `ViewModels` or `Repositories`.</p>\n<a href=\"https://medium.com/media/bfbd2017431237a705282a8cb9acbb84/href\">https://medium.com/media/bfbd2017431237a705282a8cb9acbb84/href</a><p>I have no idea why they haven\u2019t defined one for the `Main` dispatcher, yet, but this is\u00a0it.</p>\n<p>Let\u2019s provide the corresponding Dispatchers for each of these by defining them in our dependency injection, Hilt, as\u00a0follows:</p>\n<a href=\"https://medium.com/media/8b4091d6dec5436fe2cba5d646fd23bd/href\">https://medium.com/media/8b4091d6dec5436fe2cba5d646fd23bd/href</a><p>With that, it\u2019s time to make a CoroutineScope for the ApplicationScope\u00a0. Since the application scope\u2019s context is <a href=\"https://medium.com/androiddevelopers/exceptions-in-coroutines-ce8da1ec060c\">SupervisorJob()</a> its children can fail independently because it\u2019s insane to cancel all the application coroutines if somewhere a failure\u00a0occurs!</p>\n<p>We can update the dispatcher when it is required so in order to have a clean code we use our Default dispatcher which is suitable for\u00a0testing.</p>\n<a href=\"https://medium.com/media/29eeb8cb7593f8fac6e4fa6804ee67bd/href\">https://medium.com/media/29eeb8cb7593f8fac6e4fa6804ee67bd/href</a><p>In order to clarify what I mean by updating the dispatcher you could check this code, which is somehow a simplified version of DataStoreModule.kt from the #nowinandroid app.</p>\n<a href=\"https://medium.com/media/d036b92247eed3e90c92346a503aac28/href\">https://medium.com/media/d036b92247eed3e90c92346a503aac28/href</a><p>We\u2019re done with coroutine stuff. Let\u2019s jump into the Result class to wrap network status into three stages: Loading, Success, and\u00a0Error.</p>\n<a href=\"https://medium.com/media/c5a7fb7888f80884765106b9752ca77e/href\">https://medium.com/media/c5a7fb7888f80884765106b9752ca77e/href</a><p>To use data object you need to update the project Kotlin version 1.9.0 as Android Studio will notify you about it. I did it by adding languageVersion to the build.gradle([your_project_name]) as\u00a0follows:</p>\n<a href=\"https://medium.com/media/caa49a854eecbb0230d637ca031de3fd/href\">https://medium.com/media/caa49a854eecbb0230d637ca031de3fd/href</a><p>Sorry, but I don\u2019t have any clue how to get rid of the warning that kotlinOptions is deprecated, yet. I\u2019ll be happy if <strong>let me know how to do it \ud83d\ude4f </strong>in the comments if I get any.\u00a0\ud83e\udd2a</p>\n<p>Commonly when we want to get a network response or any long process Result we expect the Loading state at first, and when it is ready to consume one of two Success or in case of any error, it becomes Error\u00a0.</p>\n<p>Let\u2019s define the asResult extension function to take care of such a scenario when providing Result from a\u00a0Flow.</p>\n<a href=\"https://medium.com/media/bd0cb01b6c3e9cde35a751c033c6be5d/href\">https://medium.com/media/bd0cb01b6c3e9cde35a751c033c6be5d/href</a><p>Now let\u2019s test our thoughts about asResult works as expected by writing a unit test. We need the <a href=\"https://github.com/cashapp/turbine\"><strong>Turbin</strong></a><strong> </strong>library to test\u00a0Flow.</p>\n<a href=\"https://medium.com/media/51439e51b25c2ededb0def438757b74b/href\">https://medium.com/media/51439e51b25c2ededb0def438757b74b/href</a><p>That\u2019s it. I tried to cover everything about the common `:core:module` included in the #nowinandroid project. I like to hear your feedback and Happy\u00a0coding.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7ffd23e5d138\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["now-in-android","github","kotlin","android","multi-module-project"]}]}